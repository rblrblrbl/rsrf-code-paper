name_plot <- paste0( name_plot, " with noise ~N(0,1)")
results_rsrf_df <- data.frame( replace =  unlist( results_rsrf[,1:ncol(results_rsrf)]["replace",] ),
n =  unlist( results_rsrf[,1:ncol(results_rsrf)]["n",] ),
error_rsrf =  unlist( results_rsrf[,1:ncol(results_rsrf)]["error_intf",])
)
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/FIGURE_2/intf")
### Generates plot only for Random Forests results.
library(ggplot2)
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("intf_plot")
#Get files for plot.
#Get RSRF results
list_RDS_filenames <- list.files(pattern="*.RDS")
list_RDS_objects <- lapply(list_RDS_filenames, readRDS)
results_rsrf <- do.call( cbind, list_RDS_objects)
name_plot <- results_rsrf[,1]$reg_function
name_plot <- paste0( name_plot, " with noise ~N(0,1)")
results_intf_df <- data.frame( replace =  unlist( results_intf[,1:ncol(results_intf)]["replace",] ),
n =  unlist( results_intf[,1:ncol(results_intf)]["n",] ),
error_rsrf =  unlist( results_intf[,1:ncol(results_intf)]["error_intf",])
)
#
# ### Plot logarithmic scale
plt_log <- ggplot( ) +
scale_x_log10(breaks = break_manual_log,
minor_breaks = seq(1,xlimit, by=1000),
label = labels_manual_log, limits = c(500,xlimit)) +
scale_y_log10(limits = c(0.045,0.6))  +
scale_colour_grey(start=0.1, end=0.5) +
scale_shape_manual(values = c(5)) +
ylab( "mse") +
geom_point( data = results_intf_df, aes(x=n, y= error_intf, color = algorithm, shape = algorithm), size = 2.8) +
ggtitle(name_plot)
### PLOT
break_manual_log <- c(500, 1000, 2500,5000, 10000, 25000, 50000)
labels_manual_log <- c("500", "1000", "2500", "5000", "10000", "25000", "50000")
xlimit <- 50000
#
# ### Plot logarithmic scale
plt_log <- ggplot( ) +
scale_x_log10(breaks = break_manual_log,
minor_breaks = seq(1,xlimit, by=1000),
label = labels_manual_log, limits = c(500,xlimit)) +
scale_y_log10(limits = c(0.045,0.6))  +
scale_colour_grey(start=0.1, end=0.5) +
scale_shape_manual(values = c(5)) +
ylab( "mse") +
geom_point( data = results_intf_df, aes(x=n, y= error_intf, color = algorithm, shape = algorithm), size = 2.8) +
ggtitle(name_plot)
results_intf_df <- data.frame( replace =  unlist( results_intf[,1:ncol(results_intf)]["replace",] ),
n =  unlist( results_intf[,1:ncol(results_intf)]["n",] ),
error_rsrf =  unlist( results_intf[,1:ncol(results_intf)]["error_intf",])
)
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/FIGURE_2/intf")
### Generates plot only for Random Forests results.
library(ggplot2)
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("intf_plot")
#Get files for plot.
#Get INTF results
list_RDS_filenames <- list.files(pattern="*.RDS")
list_RDS_objects <- lapply(list_RDS_filenames, readRDS)
results_intf <- do.call( cbind, list_RDS_objects)
name_plot <- results_rsrf[,1]$reg_function
name_plot <- paste0( name_plot, " with noise ~N(0,1)")
results_intf_df <- data.frame( replace =  unlist( results_intf[,1:ncol(results_intf)]["replace",] ),
n =  unlist( results_intf[,1:ncol(results_intf)]["n",] ),
error_rsrf =  unlist( results_intf[,1:ncol(results_intf)]["error_intf",])
)
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/FIGURE_2/intf")
### Generates plot only for Random Forests results.
library(ggplot2)
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("intf_plot")
#Get files for plot.
#Get INTF results
list_RDS_filenames <- list.files(pattern="*.RDS")
list_RDS_objects <- lapply(list_RDS_filenames, readRDS)
results_intf <- do.call( cbind, list_RDS_objects)
name_plot <- results_rsrf[,1]$reg_function
### Generates plot only for Random Forests results.
library(ggplot2)
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("intf_plot")
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/FIGURE_2/intf")
### Generates plot only for Random Forests results.
library(ggplot2)
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("intf_plot")
#Get files for plot.
#Get INTF results
list_RDS_filenames <- list.files(pattern="*.RDS")
list_RDS_objects <- lapply(list_RDS_filenames, readRDS)
results_intf <- do.call( cbind, list_RDS_objects)
name_plot <- results_intf[,1]$reg_function
name_plot <- paste0( name_plot, " with noise ~N(0,1)")
results_intf_df <- data.frame( replace =  unlist( results_intf[,1:ncol(results_intf)]["replace",] ),
n =  unlist( results_intf[,1:ncol(results_intf)]["n",] ),
error_rsrf =  unlist( results_intf[,1:ncol(results_intf)]["error_intf",])
)
results_intf_df["algorithm"] <- "INTF"
### PLOT
break_manual_log <- c(500, 1000, 2500,5000, 10000, 25000, 50000)
labels_manual_log <- c("500", "1000", "2500", "5000", "10000", "25000", "50000")
xlimit <- 50000
#
# ### Plot logarithmic scale
plt_log <- ggplot( ) +
scale_x_log10(breaks = break_manual_log,
minor_breaks = seq(1,xlimit, by=1000),
label = labels_manual_log, limits = c(500,xlimit)) +
scale_y_log10(limits = c(0.045,0.6))  +
scale_colour_grey(start=0.1, end=0.5) +
scale_shape_manual(values = c(5)) +
ylab( "mse") +
geom_point( data = results_intf_df, aes(x=n, y= error_intf, color = algorithm, shape = algorithm), size = 2.8) +
ggtitle(name_plot)
plt_log
### Generates plot only for Random Forests results.
library(ggplot2)
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("rsrf_plot")
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/FIGURE_2/rsrf")
### Generates plot only for Random Forests results.
library(ggplot2)
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("rsrf_plot")
#Get files for plot.
#Get RSRF results
list_RDS_filenames <- list.files(pattern="*.RDS")
list_RDS_objects <- lapply(list_RDS_filenames, readRDS)
results_rsrf <- do.call( cbind, list_RDS_objects)
name_plot <- results_rsrf[,1]$reg_function
name_plot <- paste0( name_plot, " with noise ~N(0,1)")
results_rsrf_df <- data.frame( replace =  unlist( results_rsrf[,1:ncol(results_rsrf)]["replace",] ),
n =  unlist( results_rsrf[,1:ncol(results_rsrf)]["n",] ),
error_rsrf =  unlist( results_rsrf[,1:ncol(results_rsrf)]["error_rsrf",]),
error_train_rsrf = unlist( results_rsrf[,1:ncol(results_rsrf)]["error_train_rsrf",]),
mtry_mode = as.factor( unlist( results_rsrf[,1:ncol(results_rsrf)]["mtry_mode",] )),
mtry_rsrf = as.factor( unlist( results_rsrf[,1:ncol(results_rsrf)]["mtry_rsrf_step",] )) )
results_rsrf
ncol(results_rsrf)
### Generates plot only for Random Forests results.
library(ggplot2)
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("rsrf_plot")
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/FIGURE_2/rsrf")
### Generates plot only for Random Forests results.
library(ggplot2)
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("rsrf_plot")
#Get files for plot.
#Get RSRF results
list_RDS_filenames <- list.files(pattern="*.RDS")
list_RDS_objects <- lapply(list_RDS_filenames, readRDS)
results_rsrf <- do.call( cbind, list_RDS_objects)
name_plot <- results_rsrf[,1]$reg_function
name_plot <- paste0( name_plot, " with noise ~N(0,1)")
results_rsrf_df <- data.frame( replace =  unlist( results_rsrf[,1:ncol(results_rsrf)]["replace",] ),
n =  unlist( results_rsrf[,1:ncol(results_rsrf)]["n",] ),
error_rsrf =  unlist( results_rsrf[,1:ncol(results_rsrf)]["error_rsrf",]),
error_train_rsrf = unlist( results_rsrf[,1:ncol(results_rsrf)]["error_train_rsrf",]),
mtry_mode = as.factor( unlist( results_rsrf[,1:ncol(results_rsrf)]["mtry_mode",] )),
mtry_rsrf = as.factor( unlist( results_rsrf[,1:ncol(results_rsrf)]["mtry_rsrf_step",] )) )
results_rsrf_df["algorithm"] <- "RSRF"
### PLOT
break_manual_log <- c(500, 1000, 2500,5000, 10000, 25000, 50000)
labels_manual_log <- c("500", "1000", "2500", "5000", "10000", "25000", "50000")
xlimit <- 50000
#
# ### Plot logarithmic scale
plt_log <- ggplot(data = results_rsrf_df, aes( x= n, y = error_rsrf) ) +
scale_x_log10(breaks = break_manual_log,
minor_breaks = seq(1,xlimit, by=1000),
label = labels_manual_log, limits = c(500,xlimit)) +
scale_y_log10(limits = c(0.045,0.6))  +
scale_colour_grey(start=0.1, end=0.5) +
scale_shape_manual(values = c(18)) +
ylab( "mse") +
geom_point( data = results_rsrf_df, aes(x=n, y= error_rsrf, color = algorithm, shape = algorithm), size = 2.8) +
ggtitle(name_plot)
plt_log
ggsave("plot_figure2_only_rsrf.png", width = 8, height=6)
# ### Plot logarithmic scale
plt_log <- ggplot(data = results_intf_df, aes( x= n, y = error_intf) ) +
scale_x_log10(breaks = break_manual_log,
minor_breaks = seq(1,xlimit, by=1000),
label = labels_manual_log, limits = c(500,xlimit)) +
scale_y_log10(limits = c(0.045,0.6))  +
scale_colour_grey(start=0.1, end=0.5) +
scale_shape_manual(values = c(18)) +
ylab( "mse") +
geom_point( data = results_intf_df, aes(x=n, y= error_intf, color = algorithm, shape = algorithm), size = 2.8) +
ggtitle(name_plot)
### Generates plot only for Random Forests results.
library(ggplot2)
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("intf_plot")
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/FIGURE_2/intf")
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("intf_plot")
#Get files for plot.
#Get INTF results
list_RDS_filenames <- list.files(pattern="*.RDS")
list_RDS_objects <- lapply(list_RDS_filenames, readRDS)
results_intf <- do.call( cbind, list_RDS_objects)
name_plot <- results_intf[,1]$reg_function
name_plot <- paste0( name_plot, " with noise ~N(0,1)")
results_intf_df <- data.frame( replace =  unlist( results_intf[,1:ncol(results_intf)]["replace",] ),
n =  unlist( results_intf[,1:ncol(results_intf)]["n",] ),
error_rsrf =  unlist( results_intf[,1:ncol(results_intf)]["error_intf",])
)
results_intf_df["algorithm"] <- "INTF"
### PLOT
break_manual_log <- c(500, 1000, 2500,5000, 10000, 25000, 50000)
labels_manual_log <- c("500", "1000", "2500", "5000", "10000", "25000", "50000")
xlimit <- 50000
#
# ### Plot logarithmic scale
plt_log <- ggplot( ) +
scale_x_log10(breaks = break_manual_log,
minor_breaks = seq(1,xlimit, by=1000),
label = labels_manual_log, limits = c(500,xlimit)) +
scale_y_log10(limits = c(0.045,0.6))  +
scale_colour_grey(start=0.1, end=0.5) +
scale_shape_manual(values = c(5)) +
ylab( "mse") +
geom_point( data = results_intf_df, aes(x=n, y= error_intf, color = algorithm, shape = algorithm), size = 2.8) +
ggtitle(name_plot)
plt_log
### Generates plot only for Random Forests results.
library(ggplot2)
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("intf_plot")
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/FIGURE_2/intf")
### Generates plot only for Random Forests results.
library(ggplot2)
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("intf_plot")
#Get files for plot.
#Get INTF results
list_RDS_filenames <- list.files(pattern="*.RDS")
list_RDS_objects <- lapply(list_RDS_filenames, readRDS)
results_intf <- do.call( cbind, list_RDS_objects)
name_plot <- results_intf[,1]$reg_function
name_plot <- paste0( name_plot, " with noise ~N(0,1)")
results_intf_df <- data.frame( replace =  unlist( results_intf[,1:ncol(results_intf)]["replace",] ),
n =  unlist( results_intf[,1:ncol(results_intf)]["n",] ),
error_intf =  unlist( results_intf[,1:ncol(results_intf)]["error_intf",])
)
results_intf_df["algorithm"] <- "INTF"
### PLOT
break_manual_log <- c(500, 1000, 2500,5000, 10000, 25000, 50000)
labels_manual_log <- c("500", "1000", "2500", "5000", "10000", "25000", "50000")
xlimit <- 50000
#
# ### Plot logarithmic scale
# plt_log <- ggplot( ) +
#   scale_x_log10(breaks = break_manual_log,
#                 minor_breaks = seq(1,xlimit, by=1000),
#                 label = labels_manual_log, limits = c(500,xlimit)) +
#   scale_y_log10(limits = c(0.045,0.6))  +
#   scale_colour_grey(start=0.1, end=0.5) +
#   scale_shape_manual(values = c(5)) +
#   ylab( "mse") +
#   geom_point( data = results_intf_df, aes(x=n, y= error_intf, color = algorithm, shape = algorithm), size = 2.8) +
#   ggtitle(name_plot)
# plt_log
# ggsave("plot_figure2_only_intf.png", width = 8, height=6)
# ### Plot logarithmic scale
plt_log <- ggplot(data = results_intf_df, aes( x= n, y = error_intf) ) +
scale_x_log10(breaks = break_manual_log,
minor_breaks = seq(1,xlimit, by=1000),
label = labels_manual_log, limits = c(500,xlimit)) +
scale_y_log10(limits = c(0.045,0.6))  +
scale_colour_grey(start=0.1, end=0.5) +
scale_shape_manual(values = c(18)) +
ylab( "mse") +
geom_point( data = results_intf_df, aes(x=n, y= error_intf, color = algorithm, shape = algorithm), size = 2.8) +
ggtitle(name_plot)
plt_log
ggsave("plot_figure2_only_intf.png", width = 8, height=6)
### Generates plot only for Random Forests results.
library(ggplot2)
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("intf_plot")
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/FIGURE_2/intf")
# ### Plot logarithmic scale
plt_log <- ggplot(data = results_intf_df, aes( x= n, y = error_intf) ) +
scale_x_log10(breaks = break_manual_log,
minor_breaks = seq(1,xlimit, by=1000),
label = labels_manual_log, limits = c(500,xlimit)) +
scale_y_log10(limits = c(0.045,0.6))  +
scale_colour_grey(start=0.1, end=0.5) +
scale_shape_manual(values = c(5)) +
ylab( "mse") +
geom_point( data = results_intf_df, aes(x=n, y= error_intf, color = algorithm, shape = algorithm), size = 2.8) +
ggtitle(name_plot)
plt_log
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/FIGURE_2/intf")
### Generates plot only for Random Forests results.
library(ggplot2)
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("intf_plot")
#Get files for plot.
#Get INTF results
list_RDS_filenames <- list.files(pattern="*.RDS")
list_RDS_objects <- lapply(list_RDS_filenames, readRDS)
results_intf <- do.call( cbind, list_RDS_objects)
name_plot <- results_intf[,1]$reg_function
name_plot <- paste0( name_plot, " with noise ~N(0,1)")
results_intf_df <- data.frame( replace =  unlist( results_intf[,1:ncol(results_intf)]["replace",] ),
n =  unlist( results_intf[,1:ncol(results_intf)]["n",] ),
error_intf =  unlist( results_intf[,1:ncol(results_intf)]["error_intf",])
)
results_intf_df["algorithm"] <- "INTF"
### PLOT
break_manual_log <- c(500, 1000, 2500,5000, 10000, 25000, 50000)
labels_manual_log <- c("500", "1000", "2500", "5000", "10000", "25000", "50000")
xlimit <- 50000
#
# ### Plot logarithmic scale
# plt_log <- ggplot( ) +
#   scale_x_log10(breaks = break_manual_log,
#                 minor_breaks = seq(1,xlimit, by=1000),
#                 label = labels_manual_log, limits = c(500,xlimit)) +
#   scale_y_log10(limits = c(0.045,0.6))  +
#   scale_colour_grey(start=0.1, end=0.5) +
#   scale_shape_manual(values = c(5)) +
#   ylab( "mse") +
#   geom_point( data = results_intf_df, aes(x=n, y= error_intf, color = algorithm, shape = algorithm), size = 2.8) +
#   ggtitle(name_plot)
# plt_log
# ggsave("plot_figure2_only_intf.png", width = 8, height=6)
# ### Plot logarithmic scale
plt_log <- ggplot(data = results_intf_df, aes( x= n, y = error_intf) ) +
scale_x_log10(breaks = break_manual_log,
minor_breaks = seq(1,xlimit, by=1000),
label = labels_manual_log, limits = c(500,xlimit)) +
scale_y_log10(limits = c(0.045,0.6))  +
scale_colour_grey(start=0.1, end=0.5) +
scale_shape_manual(values = c(5)) +
ylab( "mse") +
geom_point( data = results_intf_df, aes(x=n, y= error_intf, color = algorithm, shape = algorithm), size = 1.8) +
ggtitle(name_plot)
plt_log
ggsave("plot_figure2_only_intf.png", width = 8, height=6)
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/FIGURE_2/rsrf")
### Generates plot only for Random Forests results.
library(ggplot2)
#Make sure to set wd to place where folder "rsrf_plot" is
setwd("rsrf_plot")
#Get files for plot.
#Get RSRF results
list_RDS_filenames <- list.files(pattern="*.RDS")
list_RDS_objects <- lapply(list_RDS_filenames, readRDS)
results_rsrf <- do.call( cbind, list_RDS_objects)
name_plot <- results_rsrf[,1]$reg_function
name_plot <- paste0( name_plot, " with noise ~N(0,1)")
results_rsrf_df <- data.frame( replace =  unlist( results_rsrf[,1:ncol(results_rsrf)]["replace",] ),
n =  unlist( results_rsrf[,1:ncol(results_rsrf)]["n",] ),
error_rsrf =  unlist( results_rsrf[,1:ncol(results_rsrf)]["error_rsrf",]),
error_train_rsrf = unlist( results_rsrf[,1:ncol(results_rsrf)]["error_train_rsrf",]),
mtry_mode = as.factor( unlist( results_rsrf[,1:ncol(results_rsrf)]["mtry_mode",] )),
mtry_rsrf = as.factor( unlist( results_rsrf[,1:ncol(results_rsrf)]["mtry_rsrf_step",] )) )
results_rsrf_df["algorithm"] <- "RSRF"
### PLOT
break_manual_log <- c(500, 1000, 2500,5000, 10000, 25000, 50000)
labels_manual_log <- c("500", "1000", "2500", "5000", "10000", "25000", "50000")
xlimit <- 50000
#
# ### Plot logarithmic scale
plt_log <- ggplot(data = results_rsrf_df, aes( x= n, y = error_rsrf) ) +
scale_x_log10(breaks = break_manual_log,
minor_breaks = seq(1,xlimit, by=1000),
label = labels_manual_log, limits = c(500,xlimit)) +
scale_y_log10(limits = c(0.045,0.6))  +
scale_colour_grey(start=0.1, end=0.5) +
scale_shape_manual(values = c(18)) +
ylab( "mse") +
geom_point( data = results_rsrf_df, aes(x=n, y= error_rsrf, color = algorithm, shape = algorithm), size = 2.8) +
ggtitle(name_plot)
plt_log
ggsave("plot_figure2_only_rsrf.png", width = 8, height=6)
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/FIGURE_2/ranger")
### Generates plot only for Random Forests results.
library(ggplot2)
# library(ggnewscale)
#Make sure to set wd to place where folder "ranger_plot" is
setwd("ranger_plot")
filename_mtry1 <- paste0( "simulations_results_ranger_mtry_1.RDS")
results_mtry1 <- readRDS(filename_mtry1)
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/FIGURE_2/ranger")
### Generates plot only for Random Forests results.
library(ggplot2)
# library(ggnewscale)
#Make sure to set wd to place where folder "ranger_plot" is
setwd("ranger_plot")
filename_mtry1 <- paste0( "simulations_results_ranger_mtry_1.RDS")
results_mtry1 <- readRDS(filename_mtry1)
filename_mtry2 <- paste0( "simulations_results_ranger_mtry_2.RDS")
results_mtry2 <- readRDS(filename_mtry2)
filename_mtry3 <- paste0( "simulations_results_ranger_mtry_3.RDS")
results_mtry3 <- readRDS(filename_mtry3)
filename_mtry4 <- paste0( "simulations_results_ranger_mtry_4.RDS")
results_mtry4 <- readRDS(filename_mtry4)
filename_mtry5 <- paste0( "simulations_results_ranger_mtry_5.RDS")
results_mtry5 <- readRDS(filename_mtry5)
filename_mtry6 <- paste0( "simulations_results_ranger_mtry_6.RDS")
results_mtry6 <- readRDS(filename_mtry6)
results <- cbind( results_mtry1,
results_mtry2,
results_mtry3,
results_mtry4,
results_mtry5,
results_mtry6
)
name_plot <- results_mtry1[,1]$reg_function
name_plot <- paste0( name_plot, " with noise ~N(0,1)")
#rf df
results_df <- data.frame( replace =  unlist( results[,1:ncol(results)]["replace",] ),
n =  unlist( results[,1:ncol(results)]["n",] ),
error_rf =  unlist( results[,1:ncol(results)]["error_rf",]),
mtry = as.factor( unlist( results[,1:ncol(results)]["mtry_rf",] ) ) )
break_manual_log <- c(500, 1000, 2500,5000, 10000, 25000, 50000)
labels_manual_log <- c("500", "1000", "2500", "5000", "10000", "25000", "50000")
### PLOT Ranger
### logscale
xlimit <- 50000
#
# ### Plot logarithmic scale
plt_log <- ggplot(data = results_df, aes( x= n, y = error_rf) ) +
scale_x_log10(breaks = break_manual_log,
minor_breaks = seq(1,xlimit, by=1000),
label = labels_manual_log, limits = c(500,xlimit)) +
scale_y_log10(limits = c(0.045,0.6))  +
scale_color_brewer(palette="Dark2") +
geom_point(size = 2.5, aes(color=mtry)) +
# new_scale_colour() +
# scale_colour_grey(start=0.1, end=0.5) +
# scale_shape_manual(values = c(5,18)) +
ylab( "mse") +
# geom_point( data = results_intf_df, aes(x=n, y= error_intf, color = algorithm, shape = algorithm), size = 1.8) +
# geom_point( data = results_rsrf_df, aes(x=n, y= error_rsrf, color = algorithm, shape = algorithm), size = 2.8) +
ggtitle(name_plot)
plt_log
ggsave("plot_figure2_only_ranger.png", width = 8, height=6)
rs <- readRDS("C:/Users/ricar/AppData/Roaming/MobaXterm/slash/RemoteFiles/4325770_2_3/result_A4_intf_cv_1_10.RDS")
rs
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/INTF_CV/others")
#### CONVERT ####
#Outputs error given RDS files in working directory
print("This file calculates the results for ALL .RDS files in folder INTF_CV/results")
print("Make sure that only those are included for which you want to calculate the results. e.g. only those for model A4")
####
setwd("../results")
list_RDS_filenames <- list.files(pattern="*.RDS")
list_RDS_objects <- lapply(list_RDS_filenames, readRDS)
cat( "Combining Result files: \n",
paste(list_RDS_filenames, pattern = "\n"  ) )
errors <- NULL
for( i in 1:length( list_RDS_objects )){
errors[[i]] <- sapply( list_RDS_objects[[i]] , function( lst ) return( lst$error ) )
}
#### CONVERT ####
#Outputs error given RDS files in working directory
print("This file calculates the results for ALL .RDS files in folder INTF_CV/results")
print("Make sure that only those are included for which you want to calculate the results. e.g. only those for model A4")
####
setwd("../results")
list_RDS_filenames <- list.files(pattern="*.RDS")
list_RDS_objects <- lapply(list_RDS_filenames, readRDS)
cat( "Combining Result files: \n",
paste(list_RDS_filenames, pattern = "\n"  ) )
errors <- NULL
for( i in 1:length( list_RDS_objects )){
errors[[i]] <- sapply( list_RDS_objects[[i]] , function( lst ) return( lst$error ) )
}
errors <- Reduce( c, errors)
cat( "-------- Results  --------", "\n", "ERROR: ", mean(errors), "\n",
"SD:    ", sd(errors) )
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/INTF_CV")
#### CONVERT ####
#Outputs error given RDS files in working directory
setwd("results_F6_paper")
list_RDS_filenames <- list.files(pattern="*.RDS")
list_RDS_objects <- lapply(list_RDS_filenames, readRDS)
cat( "Combining Result files: \n",
paste(list_RDS_filenames, pattern = "\n"  ) )
errors <- NULL
for( i in 1:length( list_RDS_objects )){
errors[[i]] <- sapply( list_RDS_objects[[i]] , function( lst ) return( lst$error ) )
}
errors <- Reduce( c, errors)
cat( "----- Results (Paper) ------", "\n", "ERROR: ", mean(errors), "\n",
"SD:    ", sd(errors) )
####
setwd("../results")
list_RDS_filenames <- list.files(pattern="*.RDS")
if( length( list_RDS_filenames ) < 5 ){
stop("Not all filenames are available yet. Make sure all simulations from file run_rsrf_af_F6 have been made. Files in results should be as in folder results_F6.")
}
list_RDS_objects <- lapply(list_RDS_filenames, readRDS)
cat( "Combining Result files: \n",
paste(list_RDS_filenames, pattern = "\n"  ) )
errors <- NULL
for( i in 1:length( list_RDS_objects )){
errors[[i]] <- sapply( list_RDS_objects[[i]] , function( lst ) return( lst$error ) )
}
errors <- Reduce( c, errors)
cat( "----- Results (Paper) ------", "\n", "ERROR: ", mean(errors), "\n",
"SD:    ", sd(errors) )
