"mtry (RF):             ", mtry_rf, "\n",
"No. of trees (RF):     ", num_trees_rf, "\n",
"replace?:              ", replace, "\n",
"Min nodesize (RF):     ", min_node_size_rf, "\n",
"Error Train RF:        ", error_train_rf, "\n",
"Error RF (with sd):    ", error_rf, "(", sd_rf, ")", "\n","\n",
"Time in mins (RF)    ", rf_time, "\n")
}
if(build_intf == TRUE){
error_train_intf <- mean( simulate_train_intf )
error_intf <- mean( simulate_intf )
sd_intf <- sd( simulate_intf )
cat("Simulation results for Interaction Forests\n",
"npairs     :           ", npairs_intf, "\n",
"No. of trees (INTF):   ", num_trees_intf, "\n",
"replace?:              ", replace_intf, "\n",
"Min nodesize (INTF)    ", min_node_size_intf, "\n",
"Error Train INTF:      ", error_train_intf, "\n",
"Error INTF (with sd):  ", error_intf, "(", sd_intf, ")", "\n","\n",
"Time in mins (INTF):   ", intf_time, "\n")
}
if(simulate_mean == TRUE){
error_train_rf <- mean( simulate_mean_error_train )
error_rf <- mean( simulate_mean_error )
sd_rf <- sd( simulate_mean_error )
cat("Simulation results: Dummy estimator mean of Y values.\n",
"Error Train Y-mean:        ", error_train_rf, "\n",
"Error Y-Mean (with sd):    ", error_rf, "(", sd_rf, ")", "\n","\n")
}
#VARIANTE 1 Load all
#Load all
#setwd( "C:/Users/ricar/Documents/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrfdev" )
#devtools::load_all()
###############################
#VARIANTE 2 Install
#Install instead (needed when using parallelization on windows)
#setwd( "C:/Users/ricar/Documents/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrfdev" )
# devtools::install()
#library(simpleRSRF)
###############################
#VARIANTE 3 source manually
#
# library(parallel)
# setwd( "C:/Users/ricar/Documents/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrfdev" )
# source("R/Data.R")
# source("R/Forest.R")
# source("R/ForestRandomRegression.R")
# source("R/simpleRSRF.R")
# source("R/Tree.R")
# source("R/TreeRandomRegression.R")
# source("R/utility.R")
library(simpleRSRF)
library(ranger)
library(diversityForest)
library(MASS)
# library(MASS) #To simulate Multivariate Normal
###############################
#Data generation
generateDataUnif03<- function(n, m_reg, sd = 0.5){
x1 <- runif(n)
x2 <- runif(n)
x3 <- runif(n)
mx <- m_reg(x1, x2, x3)
y  <- mx + rnorm(n, sd = sd )
regdata <- data.frame(x1 = x1, x2=x2, x3 = x3, y = y, mx = mx )
return( regdata )
}
generateDataUnif<- function(n, m_reg, sd = 1){
x1 <- runif(n)
x2 <- runif(n)
x3 <- runif(n)
x4 <- runif(n)
mx <- m_reg(x1, x2, x3, x4)
y  <- mx + rnorm(n, sd = sd )
regdata <- data.frame(x1 = x1, x2=x2, x3 = x3, x4 = x4, y = y, mx = mx )
return( regdata )
}
#Generates Data according to Nils and Sperrlich
generateDataNisp <- function(n, m_reg = m_pure_sparse){
#a1 <- rnorm(4 * n, 0 , sd = sqrt( 1-0.3 ) )
#a0 <- rnorm(n, 0, sd = sqrt( 0.3 ) )
#X <- 2.5 * atan( a1 + a0 ) / pi
#dim(X) <- c(n,4)
#with package MASS
Sigma <- matrix( c(1, 0.3, 0.3, 0.3, 0.3, 1, 0.3, 0.3, 0.3, 0.3, 1, 0.3, 0.3, 0.3, 0.3, 1) , 4, 4)
mu <- rep(0,4)
mnorm <- mvrnorm( n, mu, Sigma )
#
#mnorm <- X
x1 <- 2.5 / pi * atan( mnorm[, 1] )
x2 <- 2.5 / pi * atan( mnorm[, 2] )
x3 <- 2.5 / pi * atan( mnorm[, 3] )
x4 <- 2.5 / pi * atan( mnorm[, 4] )
mx <- m_reg(x1, x2, x3, x4)
y  <- mx + rnorm(n)
regdata <- data.frame(x1 = x1, x2=x2, x3 = x3, x4 = x4, y = y, mx = mx)
return( regdata )
}
generateDataNisp10 <- function(n, m_reg = m_pure_sparse){
Sigma <-matrix( rep(0.3, 100 ), 10, 10)
for(i in 1:10){
Sigma[i,i] <- 1
}
mu <- rep(0,10)
mnorm <- mvrnorm( n, mu, Sigma )
x1 <- 2.5 / pi * atan( mnorm[, 1] )
x2 <- 2.5 / pi * atan( mnorm[, 2] )
x3 <- 2.5 / pi * atan( mnorm[, 3] )
x4 <- 2.5 / pi * atan( mnorm[, 4] )
x5 <- 2.5 / pi * atan( mnorm[, 5] )
x6 <- 2.5 / pi * atan( mnorm[, 6] )
x7 <- 2.5 / pi * atan( mnorm[, 7] )
x8 <- 2.5 / pi * atan( mnorm[, 8] )
x9 <- 2.5 / pi * atan( mnorm[, 9] )
x10 <- 2.5 /pi * atan( mnorm[,10] )
mx <- m_reg(x1, x2, x3, x4,x5,x6,x7,x8,x9,x10)
y  <- mx + rnorm(n)
regdata <- data.frame(x1 = x1, x2=x2, x3 = x3, x4 = x4, x5=x5, x6=x6, x7=x7, x8=x8,x9=x9,x10=x10, y = y, mx = mx)
return( regdata )
}
generateDataNisp30 <- function(n, m_reg = m_pure_sparse){
Sigma <-matrix( rep(0.3, 100 ), 30, 30)
for(i in 1:30){
Sigma[i,i] <- 1
}
mu <- rep(0,30)
mnorm <- mvrnorm( n, mu, Sigma )
x1 <- 2.5 / pi * atan( mnorm[, 1] )
x2 <- 2.5 / pi * atan( mnorm[, 2] )
x3 <- 2.5 / pi * atan( mnorm[, 3] )
x4 <- 2.5 / pi * atan( mnorm[, 4] )
x5 <- 2.5 / pi * atan( mnorm[, 5] )
x6 <- 2.5 / pi * atan( mnorm[, 6] )
x7 <- 2.5 / pi * atan( mnorm[, 7] )
x8 <- 2.5 / pi * atan( mnorm[, 8] )
x9 <- 2.5 / pi * atan( mnorm[, 9] )
x10 <- 2.5 /pi * atan( mnorm[,10] )
x11 <- 2.5 /pi * atan( mnorm[,11] )
x12 <- 2.5 /pi * atan( mnorm[,12] )
x13 <- 2.5 /pi * atan( mnorm[,13] )
x14 <- 2.5 /pi * atan( mnorm[,14] )
x15 <- 2.5 /pi * atan( mnorm[,15] )
x16 <- 2.5 /pi * atan( mnorm[,16] )
x17 <- 2.5 /pi * atan( mnorm[,17] )
x18 <- 2.5 /pi * atan( mnorm[,18] )
x19 <- 2.5 /pi * atan( mnorm[,19] )
x20 <- 2.5 /pi * atan( mnorm[,20] )
x21 <- 2.5 /pi * atan( mnorm[,21] )
x22 <- 2.5 /pi * atan( mnorm[,22] )
x23 <- 2.5 /pi * atan( mnorm[,23] )
x24 <- 2.5 /pi * atan( mnorm[,24] )
x25 <- 2.5 /pi * atan( mnorm[,25] )
x26 <- 2.5 /pi * atan( mnorm[,26] )
x27 <- 2.5 /pi * atan( mnorm[,27] )
x28 <- 2.5 /pi * atan( mnorm[,28] )
x29 <- 2.5 /pi * atan( mnorm[,29] )
x30 <- 2.5 /pi * atan( mnorm[,30] )
mx <- m_reg(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30)
y  <- mx + rnorm(n)
regdata <- data.frame(x1 = x1, x2=x2, x3 = x3, x4 = x4, x5=x5, x6=x6, x7=x7, x8=x8,x9=x9,x10=x10,
x11=x11,
x12=x12,
x13=x13,
x14=x14,
x15=x15,
x16=x16,
x17=x17,
x18=x18,
x19=x19,
x20=x20,
x21=x21,
x22=x22,
x23=x23,
x24=x24,
x25=x25,
x26=x26,
x27=x27,
x28=x28,
x29=x29,
x30=x30,
y = y, mx = mx)
return( regdata )
}
###Different Regression Functions
#Simple 2-Interaction with linear component
m_interact2 <- function(x1,x2,x3){ return( (x1 - 0.5) * (x2 - 0.5) + x3 ) }
m_interact2_2text <- function(){ return("(x1-0.5)(x2-0.5)+x3") }
#Simple 2-Interaction with linear component with factor 10 at interaction
m_interact2_factor <- function(x1,x2,x3,...){ return( 3*( (x1 - 0.5) * (x2 - 0.5) ) + 3*x3  ) }
m_interact2_factor_2text <- function(){ return("(x1-0.5)(x2-0.5)+x3") }
#Simple sparse 2-Interaction
m_interact2_sparse <- function(x1,x2,x3){ return( 3 * (x1- 0.5) * (x2 - 0.5)  )}
m_interact2_sparse_2text <- function(){ return( "3*(x1-0.5)(x2-0.5) mit d =3" )}
#Simple linear
m_lin <- function(x1,x2,x3){ return(x1 + x2 + x3) }
m_lin_2text <- function(){ return("x1+x2+x3") }
#Pure Sparse (Niels, Sperrlich)
# m_pure_sparse <- function(x1,x2,x3,x4){
#   return( -2*sin(x1 * x2 * pi ) + 2 * sin( x2 * x3 * pi ) )
# }
#Pure Sparse
m_pure_sparse <- function(x1,x2,x3,...){
return( -2*sin(x1 * x2 * pi ) + 2 * sin( x2 * x3 * pi ) )
}
m_pure_sparse_2text <- function(){return("-2*sin(x1 * x2 * pi ) + 2 * sin( x2 * x3 * pi ) mit d =...")}
#Pure Dense (Niels, Sperrlich)
m_pure_dense <- function(x1,x2,x3,x4){
return( -2*sin(x1 * x2 * pi ) + 2 * sin( x2 * x3 * pi ) - 2 * sin( x3 * x4 * pi ) )
}
m_pure_dense_2text <- function(){return("-2*sin(x1*x2*pi) + 2 * sin( x2*x3*pi) - 2 * sin (x3*x4*pi) mit d =4")}
################################
#Set Type
# simulation_type <- "nisp" #set to unif for uniform data, set to nisp for Nils and Sperrlich data
simulation_type <- "unif" #set to unif for uniform data, set to nisp for Nils and Sperrlich data
regression_type <- "interact2_factor" #set to interact2, interact2_sparse, interact2_factor, lin, or pure_sparse, pure_dense
#Set regression function
if(simulation_type == "unif"){
if(regression_type == "lin"){
m <- function(x1,x2,x3){ return( m_lin(x1,x2,x3) )}
m_2text <- function(){ return( m_lin_2text() ) }
}
if(regression_type == "interact2"){
m <- function(x1,x2,x3){ return( m_interact2(x1,x2,x3) )}
m_2text <- function(){ return( m_interact2_2text() ) }
}
if(regression_type == "interact2_factor"){
m <- function(x1,x2,x3,...){ return( m_interact2_factor(x1,x2,x3,...) )}
m_2text <- function(){ return( m_interact2_factor_2text() ) }
}
if(regression_type == "interact2_sparse"){
m <- m_interact2_sparse
m_2text <- m_interact2_sparse_2text
}
}
if(simulation_type == "nisp"){
if(regression_type == "pure_sparse"){
m <- function(x1,x2,x3,x4){ return( m_pure_sparse(x1,x2,x3,x4) )}
m_2text <- function(){ return( m_pure_sparse_2text() ) }
}
if(regression_type == "pure_dense"){
m <- m_pure_dense
m_2text <- m_pure_dense_2text
}
}
if(simulation_type == "nisp10"){
if(regression_type == "pure_sparse"){
m <- function(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10){ return( m_pure_sparse(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10) )}
m_2text <- function(){ return( m_pure_sparse_2text() ) }
}
}
if(simulation_type == "nisp30"){
if(regression_type == "pure_sparse"){
m <- function(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30){ return( m_pure_sparse(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30) )}
m_2text <- function(){ return( m_pure_sparse_2text() ) }
}
}
#Setup
n <- 500
sims <- 10
#Setup for RSRF
num_trees_rsrf <- 100
rsrf_include_CART_CART <- TRUE
rsrf_fixed_cart_cart <- TRUE
replace <- TRUE
mtry_rsrf_step_random <- 3
mtry_rsrf_step <- 3
mtry_cart_cart <- NULL
mtry_mode <- "allfixed"
rsrf_width <- 7
rsrf_depth <- 2
min_node_size_rsrf <- 5 #5 is standard in ranger
num_threads <- 1 #Parallelization of tree building process #If 1, no parallelization
#Start simulations
simulate_rsrf <- NULL
simulate_train_rsrf <- NULL
#Include learner? Set to TRUE or FALSE
build_rsrf <- FALSE
build_rf_ranger <- TRUE
build_intf <- FALSE
simulate_mean <- TRUE
simulate_mean_error <- NULL
simulate_mean_error_train <- NULL
if(build_rf_ranger == TRUE){
mtry_rf <- 4
num_trees_rf <- 500
min_node_size_rf <- 500
replace_rf <- TRUE
simulate_rf <- NULL
simulate_train_rf <- NULL
splitrule_rf <- "variance" #standard regression rf "variance", extratrees "extratrees"
num_random_splits_extratrees <- 1
}
if(build_intf == TRUE){
num_trees_intf <- 500
min_node_size_intf <- 5
replace_intf <- FALSE
npairs_intf <- 15
simulate_intf <- NULL
simulate_train_intf <- NULL
}
for( i in (1:sims)){
if( num_threads > parallel::detectCores() - 1  ){
message("Error: Not enough cores available for parallelization.")
break()
}
if(simulation_type == "unif"){regdata_train <- generateDataUnif(n, m)}
if(simulation_type == "nisp"){regdata_train <- generateDataNisp(n, m)}
if(simulation_type == "nisp10"){regdata_train <- generateDataNisp10(n, m)}
if(simulation_type == "nisp30"){regdata_train <- generateDataNisp30(n, m)}
if(simulation_type == "unif"){regdata_test <- generateDataUnif(n, m)}
if(simulation_type == "nisp"){regdata_test <- generateDataNisp(n, m)}
if(simulation_type == "nisp10"){regdata_test <- generateDataNisp10(n, m)}
if(simulation_type == "nisp30"){regdata_test <- generateDataNisp30(n, m)}
regdata_train_noise <- subset(regdata_train, select = -mx )
if( build_rsrf ){
if(i == 1){rsrf_start_time <- Sys.time() }
#####Make rsrf forest
rsrf <- simpleRSRF( y ~ .,
data = regdata_train_noise,
num_threads = num_threads,
num_trees = num_trees_rsrf,
min_node_size = min_node_size_rsrf,
randomization = TRUE,
replace = replace,
rsrf_width = rsrf_width,
mtry_mode = mtry_mode,
mtry_rsrf_step_random = mtry_rsrf_step_random,
mtry_rsrf_step = mtry_rsrf_step,
mtry_cart_cart = mtry_cart_cart,
fixed_cart_cart = rsrf_fixed_cart_cart,
rsrf_depth = rsrf_depth,
include_CART_CART = rsrf_include_CART_CART,
saveNodeInformation = FALSE)
if( i == 1 ){ rsrf_end_time <- Sys.time();  rsrf_time <- difftime(rsrf_end_time,rsrf_start_time, units="min") ; }
predict_rsrf <- rsrf$predict( subset(regdata_test, select = -mx ) )
predict_train <- rsrf$predict( regdata_train_noise )
simulate_rsrf[i] <- mean( (predict_rsrf - regdata_test$mx )^2 )
simulate_train_rsrf[i] <- mean( (predict_train - regdata_train_noise$y)^2 )
}
if( build_rf_ranger == TRUE){#Simulate Random Forest using Ranger
if( i == 1  ){ rf_start_time <- Sys.time() }
#ranger
rf <- ranger(y ~ .,
data = regdata_train_noise,
num.trees = num_trees_rf,
min.node.size = min_node_size_rf,
mtry = mtry_rf,
replace = replace_rf,
splitrule = splitrule_rf
)
if( i == 1 ){  rf_end_time <- Sys.time();  rf_time <- difftime(rf_end_time,rf_start_time, units="min")  ; }
predict_rf <- predict( rf, subset(regdata_test, select = -mx ) )$predictions
predict_train_rf <- predict( rf,  regdata_train_noise )$predictions
simulate_rf[i] <- mean( (predict_rf - regdata_test$mx)^2 )
simulate_train_rf[i] <-  mean( (predict_train_rf - regdata_train_noise$y )^2 )
}
if( simulate_mean == TRUE){
ymean <- mean(regdata_train_noise$y )
simulate_mean_error[i] <- mean( (ymean - regdata_test$mx)^2 )
simulate_mean_error_train[i] <- mean( (ymean - regdata_train_noise$y)^2 )
}
if( build_intf == TRUE){#Simulate Random Forest using Ranger
if( i == 1  ){ intf_start_time <- Sys.time() }
#intf
intf <- interactionfor( y ~ .,
data = regdata_train_noise,
num.threads = 1,
num.trees = num_trees_intf,
min.node.size = min_node_size_intf,
replace =   replace_intf,
importance = "none",
npairs = npairs_intf
)
if( i == 1 ){  intf_end_time <- Sys.time();  intf_time <- difftime(intf_end_time,intf_start_time, units="min")  ; }
predict_intf <- predict( intf, subset(regdata_test, select = -mx ) )$predictions
predict_train_intf <- predict( intf,  regdata_train_noise )$predictions
simulate_intf[i] <- mean( (predict_intf - regdata_test$mx)^2 )
simulate_train_intf[i] <-  mean( (predict_train_intf - regdata_train_noise$y )^2 )
}
}
#Output error
if(build_rsrf){
error_train_rsrf <- mean( simulate_train_rsrf )
error_rsrf <- mean( simulate_rsrf )
sd_rsrf <- sd( simulate_rsrf )
cat("Simulation completed\n",
"Regression-Function:   ", m_2text(), "\n",
"Data-Type:             ", simulation_type,"\n",
"No. of data points n:  ", n, "\n",
"mtry_mode:             ", mtry_mode, "\n",
"mtry Random in RC-step:", mtry_rsrf_step_random, "\n",
"mtry Random-CART step: ", mtry_rsrf_step, "\n",
"mtry CART-CART step:   ", mtry_cart_cart, "\n",
"fixed cart-cart?       ", rsrf_fixed_cart_cart, "\n",
"rsrf width:            ", rsrf_width, "\n",
"rsrf_depth:            ", rsrf_depth, "\n",
"Include CART-CART:     ", rsrf_include_CART_CART, "\n",
"Min nodesize           ", min_node_size_rsrf, "\n",
"No. of trees (RSRF):   ", num_trees_rsrf, "\n",
"replace?:              ", replace, "\n",
"No. of simulations:    ", sims, "\n",
"Error Train RSRF:      ", error_train_rsrf, "\n","\n",
"Error RSRF (with sd):  ", error_rsrf, "(", sd_rsrf, ")", "\n","\n",
"Time in mins (RSRF)    ", rsrf_time, "\n")
}
if(build_rf_ranger == TRUE){
error_train_rf <- mean( simulate_train_rf )
error_rf <- mean( simulate_rf )
sd_rf <- sd( simulate_rf )
cat("Simulation results for RF\n",
"mtry (RF):             ", mtry_rf, "\n",
"No. of trees (RF):     ", num_trees_rf, "\n",
"replace?:              ", replace, "\n",
"Min nodesize (RF):     ", min_node_size_rf, "\n",
"Error Train RF:        ", error_train_rf, "\n",
"Error RF (with sd):    ", error_rf, "(", sd_rf, ")", "\n","\n",
"Time in mins (RF)    ", rf_time, "\n")
}
if(build_intf == TRUE){
error_train_intf <- mean( simulate_train_intf )
error_intf <- mean( simulate_intf )
sd_intf <- sd( simulate_intf )
cat("Simulation results for Interaction Forests\n",
"npairs     :           ", npairs_intf, "\n",
"No. of trees (INTF):   ", num_trees_intf, "\n",
"replace?:              ", replace_intf, "\n",
"Min nodesize (INTF)    ", min_node_size_intf, "\n",
"Error Train INTF:      ", error_train_intf, "\n",
"Error INTF (with sd):  ", error_intf, "(", sd_intf, ")", "\n","\n",
"Time in mins (INTF):   ", intf_time, "\n")
}
if(simulate_mean == TRUE){
error_train_rf <- mean( simulate_mean_error_train )
error_rf <- mean( simulate_mean_error )
sd_rf <- sd( simulate_mean_error )
cat("Simulation results: Dummy estimator mean of Y values.\n",
"Error Train Y-mean:        ", error_train_rf, "\n",
"Error Y-Mean (with sd):    ", error_rf, "(", sd_rf, ")", "\n","\n")
}
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrfdev/simulate_large/tasks_serious_list")
train_list <- list()
test_list <- list()
#
fileID <- "C4"
fromRDS <- readRDS(paste0(fileID,".RDS"))
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrfdev/simulate_large/tasks_serious_list")
train_list <- list()
test_list <- list()
#
fileID <- "D4"
fromRDS <- readRDS(paste0(fileID,".RDS"))
for( i in 1: fromRDS$nsims){
train_list[[i]] <- fromRDS$tasks[[i]]$data()
test_list[[i]] <- fromRDS$tasks[[i]]$data(rows = fromRDS$tasks[[i]]$row_roles$holdout )
}
saveRDS( train_list, file=paste0(fileID,"_train_list.RDS") )
saveRDS( test_list, file = paste0(fileID,"_test_list.RDS") )
regdata_train_noise <- subset( train_list, select  = -c(mx) )
regdata_train_noise
regdata_train_noise <- train_list
regdata_test <- test_list
regdata_test <- test_list
regdata_train_noise <- train_list
regdata_test <- test_list
regdata_train_noise <- train_list
regdata_test <- test_list
ymean <- mean(regdata_train_noise$y )
regdata_train_noise$y
train_list
for( i in 1:100){
regdata_train_noise <- train_list[[i]]
regdata_test <- test_list[[i]]
ymean <- mean(regdata_train_noise$y )
simulate_mean_error[i] <- mean( (ymean - regdata_test$y)^2 )
simulate_mean_error_train[i] <- mean( (ymean - regdata_train_noise$y)^2 )
}
for( i in 1:100){
regdata_train_noise <- train_list[[i]]
regdata_test <- test_list[[i]]
ymean <- mean(regdata_train_noise$y )
simulate_mean_error[i] <- mean( (ymean - regdata_test$y)^2 )
simulate_mean_error_train[i] <- mean( (ymean - regdata_train_noise$y)^2 )
}
mean(simulate_mean_error)
for( i in 1:100){
regdata_train_noise <- train_list[[i]]
regdata_test <- test_list[[i]]
ymean <- mean(regdata_train_noise$y )
simulate_mean_error[i] <- mean( (ymean - regdata_test$y)^2 )
simulate_mean_error_train[i] <- mean( (ymean - regdata_train_noise$y)^2 )
}
mean(simulate_mean_error)
f <- function(x1,x2,x3,x4){
return( 3*(x1-0.5) * (x2-0.5) + 3*x3 )
}
i <- 10
regdata_train_noise <- train_list[[i]]
regdata_test <- test_list[[i]]
f(regdata_train_noise$x1, regdata_train_noise$x2, regdata_train_noise$x3, regdata_train_noise$x4)
f(regdata_train_noise$x1, regdata_train_noise$x2, regdata_train_noise$x3, regdata_train_noise$x4) - regdata_train_noise$y
mean( f(regdata_train_noise$x1, regdata_train_noise$x2, regdata_train_noise$x3, regdata_train_noise$x4) - regdata_train_noise$y )
sd( f(regdata_train_noise$x1, regdata_train_noise$x2, regdata_train_noise$x3, regdata_train_noise$x4) - regdata_train_noise$y )
sd( f(regdata_train_noise$x1, regdata_train_noise$x2, regdata_train_noise$x3, regdata_train_noise$x4) - regdata_train_noise$y )
sd( f(regdata_train_noise$x1, regdata_train_noise$x2, regdata_train_noise$x3, regdata_train_noise$x4) - regdata_train_noise$y )
sd( f(regdata_train_noise$x1, regdata_train_noise$x2, regdata_train_noise$x3, regdata_train_noise$x4) - regdata_train_noise$y )
sd( f(regdata_train_noise$x1, regdata_train_noise$x2, regdata_train_noise$x3, regdata_train_noise$x4) - regdata_train_noise$y )
i <- 10
regdata_train_noise <- train_list[[i]]
regdata_test <- test_list[[i]]
f(regdata_test$x1, regdata_test$x2, regdata_test$x3, regdata_test$x4) - regdata_test$y
f(regdata_test$x1, regdata_test$x2, regdata_test$x3, regdata_test$x4) - regdata_test$y
mean( f(regdata_test$x1, regdata_test$x2, regdata_test$x3, regdata_test$x4) - regdata_test$y )
