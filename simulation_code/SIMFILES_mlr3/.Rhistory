tt <- readRDS("C:/Users/ricar/Documents/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/simulate_large_results/intf/findopt_F6_npairs_125/results/results_22372765/results_find_opt/F6_intf.txt.RDS")
tt
outF6 <- readRDS("C:/Users/ricar/Documents/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/simulate_large_results/intf/findopt_F6_npairs_125/F6_intf.txt.RDS")
outF6
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/INTF_FINDOPT")
sim_run_index <- 0 #Run. Set to 0 for a test.
if( sim_run_index == 0){
commandArgs <- function(...) c("F", "6", "rsrf_af", "TRUE", "123")
}
if( sim_run_index == 1){
commandArgs <- function(...) c("F", "6", "rsrf_af", "FALSE", "209")
}
on_cluster <- FALSE
###
if( on_cluster ){
#get some slurm variables
procs <- as.numeric(Sys.getenv("SLURM_NTASKS"))
submit_dir <- Sys.getenv("SLURM_SUBMIT_DIR")
job_id <- Sys.getenv("SLURM_JOB_ID")
}else{
#procs <- 40
procs <- 1
submit_dir <- getwd()
job_id <- 123456789
}
###
setwd("files")
source("findopt_intf_doparallel.R")
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code/INTF_FINDOPT")
sim_run_index <- 0 #Run. Set to 0 for a test.
if( sim_run_index == 0){
commandArgs <- function(...) c("F", "6", "intf", "TRUE", "123")
}
if( sim_run_index == 1){
commandArgs <- function(...) c("F", "6", "intf", "FALSE", "209")
}
on_cluster <- FALSE
###
if( on_cluster ){
#get some slurm variables
procs <- as.numeric(Sys.getenv("SLURM_NTASKS"))
submit_dir <- Sys.getenv("SLURM_SUBMIT_DIR")
job_id <- Sys.getenv("SLURM_JOB_ID")
}else{
#procs <- 40
procs <- 1
submit_dir <- getwd()
job_id <- 123456789
}
###
setwd("files")
source("findopt_intf_doparallel.R")
library(mlr3learners)
library(mlr3)
sessionInfo()
library(mlr3tuning)
sessionInfo()
library(ranger)
sessionInfo()
setwd("~/Universitaet-Projekte/Projekt-Paper-Chi-et-al/R-Code/rsrf-code-paper/simulation_code")
library(data.table)
library(gridExtra) #needed for printing as pdf table
file_location <- getwd() #make sure this is the location where the current file is.
setup_dt <- readRDS("setup_dt.RDS")
#Get only IDS for cv versions for ranger or extratrees
setup_dt <- setup_dt[algorithm %in% c("extratrees_cv", "ranger_cv")]
#Reproduce all results using optimal parameters.
#set below which models shall be simulated
#A: pure-type
#B: hierarchical
#C: additive
#E: pure-2
#F: pure-3
models_chosen <- c("A")
dimensions_chosen <- c(4)
algorithms_chosen <- c("extratrees_cv" )
simulate_ids <- setup_dt[model %in% models_chosen & d %in% dimensions_chosen & algorithm %in% algorithms_chosen]$ID
cv_result_dt <- copy(setup_dt)
cv_result_dt <- cv_result_dt[ID %in% simulate_ids]
cv_result_dt[,error:=numeric(0)]
cv_result_dt[,sd:=numeric(0)]
################################
load_only <- FALSE
### Simulate given ID.
### RUN SIM
setwd( paste0( file_location, "/SIMFILES_mlr3" ) )
for( id in simulate_ids ){
if( load_only == TRUE){
print(paste0("Load only. ID: ", id) )
#Read R object
a <- readRDS( paste0( "results/result_dt_", id, ".RDS" ) )
cv_result_dt[ID == id, error:=a$error]
cv_result_dt[ID == id, sd:=a$sd]
}else{
id_simrun <- id
isTest <- FALSE
source("run_simulation_no_commandargs.R")
#Read resulting R object
a <- readRDS( paste0( "results/result_dt_", id, ".RDS" ) )
cv_result_dt[ID == id, error:=a$error]
cv_result_dt[ID == id, sd:=a$sd]
}
}
