% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simpleRSRF.R
\name{simpleRSRF}
\alias{simpleRSRF}
\title{simpleRSRF}
\usage{
simpleRSRF(
  formula,
  data,
  num_trees = 50,
  mtry_mode = "nothingfixed",
  mtry_rsrf_step_random = NULL,
  mtry_rsrf_step = NULL,
  mtry_cart_cart = NULL,
  min_node_size = NULL,
  replace = TRUE,
  probability = FALSE,
  splitrule = NULL,
  num_threads = 1,
  randomization = TRUE,
  use_all_data = FALSE,
  rsrf_width = NULL,
  rsrf_depth = 2,
  include_CART_CART = TRUE,
  fixed_cart_cart = FALSE,
  test_mode = FALSE,
  saveNodeInformation = FALSE
)
}
\arguments{
\item{formula}{Object of class \code{formula} or \code{character} describing the model to fit.}

\item{data}{Training data of class \code{data.frame}.}

\item{num_trees}{Number of trees.}

\item{mtry_mode}{Determines which split variables are used within the Random-CART steps. "nothingfixed" means that whenever a split is placed a new variable to split is drawn. "allfixed" means that possible split variable IDs remain unchanged over all candidate Random-CART split candidates (rsrf_width many), in every step. "semifixed" means that the possible split variables for a Random split remain fixed over candidate Random-CART-splits while the CART split variable ID are not fixed. Currently, "allfixed" and "semifixed" is only implemented for rsrf_depth = 2.}

\item{mtry_rsrf_step_random}{Only needed when mtry_mode = "fixed". Number of variables to possibly split at in each node in the Random step of a Random-CART-Step}

\item{mtry_rsrf_step}{Number of variables to possibly split at in each node in the CART step of a Random-CART-Step}

\item{mtry_cart_cart}{Number of variables to possibly split at in each node in a CART-CART-Step}

\item{min_node_size}{Minimal node size. Default 5 for regression}

\item{replace}{Sample with replacement. Default TRUE.}

\item{probability}{Not implemented. Grow a probability forest. Default FALSE.}

\item{splitrule}{Splitrule to use in trees. Defaults to "Variance" for regression forests. No other implemented.}

\item{num_threads}{Number of threads used for mclapply, set to 1 for debugging.}

\item{randomization}{If TRUE, using Random-CART steps (also see rsrf_width parameter). If FALSE, algorithm is Random Forest. Default TRUE.}

\item{use_all_data}{Only use this when needed for testing. Default FALSE. If TRUE, all data points used to built a tree (no bootstrap/subsampling)}

\item{rsrf_width}{Number of candidate Random-CART steps. (CART-CART step is not counted).}

\item{rsrf_depth}{Depth of Random-CART-steps. First, rsrf_depth - 1 Random splits are placed, followed by a CART split.}

\item{include_CART_CART}{If TRUE, we include a CART-CART step to the candidate splits of a current terminal node. Default TRUE.}

\item{fixed_cart_cart}{TRUE or FALSE. If TRUE: In mtry_mode "allfixed" (or "semifixed") the CART-CART-step variable IDs considered are the same as for Random Steps. (Only when include_CART_CART is TRUE, otherwise this parameter will be ignored.) Note that mtry_CART_CART will not be used.}

\item{test_mode}{Only for testing purposes. Sets rsrf_width to 3 if not supplied, randomization to TRUE, include_CART_CART to TRUE. In test_mode, we will not split whenvever we would have placed a split in rsrf-step. Result should be same as Random Forest. mtry_cart_cart takes role of mtry.}

\item{saveNodeInformation}{Can be used for testing purposes. Will save additional information for each node. Generates a field for the class tree called node_information.}
}
\description{
Basic Implementation of RSRF Forests.
Uses reference classes and only plain \code{R}.
Not optimized for computation speed.
}
\examples{
\donttest{
library(simpleRSRF)

# Regression
n <- 100
x1 <- runif(n, min = -1.25,max = 1.25)
x2 <- runif(n, min = -1.25,max = 1.25)
x3 <- runif(n, min = -1.25,max = 1.25)
y <- -2*sin(x1*x2*pi) + 2*sin(x2*x3*pi) + rnorm(n, sd=0.5)
train_data <- data.frame(x1 = x1, x2=x2, x3=x3, y = y)
rsrf <- simpleRSRF( y ~ ., train_data , mtry_cart_cart = 2, mtry_rsrf_step = 2, rsrf_width = 5)
# Prediction
n_pred <- 10
x1_pred <- runif(n, min = -1.25,max = 1.25)
x2_pred <- runif(n, min = -1.25,max = 1.25)
x3_pred <- runif(n, min = -1.25,max = 1.25)
y_pred <- -2*sin(x1_pred*x2_pred*pi) + 2*sin(x2_pred*x3_pred*pi) + rnorm(n_pred, sd=0.5)
pred_data <- data.frame(x1 = x1_pred, x2=x2_pred, x3=x3_pred, y = y_pred)
predictions_rsrf <- rsrf$predict(pred_data)
}

}
\references{
Breiman, L. (2001). Random forests. Mach Learn, 45(1), 5-32. \cr
}
\author{
Ricardo Blum
}
